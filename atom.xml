<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://luckyhookin.github.io</id>
    <title>Lucky Hookin</title>
    <updated>2019-11-10T03:34:01.052Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://luckyhookin.github.io"/>
    <link rel="self" href="https://luckyhookin.github.io/atom.xml"/>
    <subtitle>终身学习。</subtitle>
    <logo>https://luckyhookin.github.io/images/avatar.png</logo>
    <icon>https://luckyhookin.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Lucky Hookin</rights>
    <entry>
        <title type="html"><![CDATA[Vue 项目中使用 reCAPTCHA 人机验证服务]]></title>
        <id>https://luckyhookin.github.io/post/vue-xiang-mu-zhong-shi-yong-recaptcha-ren-ji-yan-zheng-fu-wu</id>
        <link href="https://luckyhookin.github.io/post/vue-xiang-mu-zhong-shi-yong-recaptcha-ren-ji-yan-zheng-fu-wu">
        </link>
        <updated>2019-11-08T07:43:55.000Z</updated>
        <content type="html"><![CDATA[<p>在前段时间的训练中，我偶然接触到谷歌提供的免费人机验证服务 reCAPTCHA，在一番学习后已将它接入到我的 Vue 练习项目中。下面将介绍我的接入过程与踩过的坑。</p>
<h1 id="recaptcha-v2">reCAPTCHA v2</h1>
<p>首先，你需要在 <code>./public/index.html</code> 中添加下面这段代码：</p>
<pre><code class="language-js">&lt;script src=&quot;https://www.google.com/recaptcha/api.js?render=explicit&quot; async defer&gt;&lt;/script&gt;
</code></pre>
<p>这里需要说明一下，在中国请用 <code>www.recaptcha.net</code> 替换 <code>www.google.com</code> ：</p>
<pre><code class="language-js">&lt;script src=&quot;https://www.recaptcha.net/recaptcha/api.js?render=explicit&quot; async defer&gt;&lt;/script&gt;
</code></pre>
<h2 id="点击复选框来验证">点击复选框来验证</h2>
<figure data-type="image" tabindex="1"><img src="https://luckyhookin.github.io/post-images/reCAPTCHA/checkbox.gif" alt="checkbox.gif"></figure>
<p>创建一个 vue 组件，完整代码如下：</p>
<pre><code class="language-js">&lt;template&gt;
  &lt;!-- 添加一个 div 用作容器 --&gt;
  &lt;div id=&quot;grecaptcha&quot;&gt;&lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
export default {
  data() {
    return {
      sitekey: &quot;6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI&quot;
    };
  },
  methods: {
    submit: function(token) {
      console.log(token);
    },
    loaded() {
      let self = this;
      setTimeout(function() {
        window.grecaptcha.render(&quot;grecaptcha&quot;, {
          sitekey: self.sitekey,
          callback: self.submit
        });
      }, 100);
    }
  },
  mounted() {
    this.loaded();
  }
};
&lt;/script&gt;
</code></pre>
<p>说明：</p>
<pre><code class="language-js">data() {
 return {
     sitekey: &quot;6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI&quot;
 }
},
</code></pre>
<p>此 <code>sitekey</code> 为<strong>测试专用</strong> <code>key</code>，你需要注册一个自己的 <code>sitekey</code> 用在生产环境中。</p>
<p>注册地址（科学上网）：<a href="https://www.google.com/recaptcha/admin/create">https://www.google.com/recaptcha/admin/create</a></p>
<figure data-type="image" tabindex="2"><img src="https://luckyhookin.github.io/post-images/reCAPTCHA/1.png" alt="1png"></figure>
<p>注册成功后得到两个密钥：</p>
<figure data-type="image" tabindex="3"><img src="https://luckyhookin.github.io/post-images/reCAPTCHA/2.png" alt="2png"></figure>
<p>第一个密钥即是 <code>sitekey</code>。</p>
<pre><code class="language-js">let self = this;
 setTimeout(function() {
  window.grecaptcha.render('grecaptcha', {
   sitekey: self.sitekey,
   callback: self.submit
  });
 }, 200);
</code></pre>
<p>grecaptcha 的渲染 API，延时 200ms 避免报以下错误：</p>
<figure data-type="image" tabindex="4"><img src="https://luckyhookin.github.io/post-images/reCAPTCHA/3.png" alt="3.png"></figure>
<p><code>self.submit</code> 为回调函数，接收返回的 <code>token</code> 用于后端验证。</p>
<p>除了 <code>sitekey</code> 和 <code>callback</code> 外，还有其他的参数，详细请看：<a href="https://developers.google.cn/recaptcha/docs/display#g-recaptcha_tag_attributes_and_grecaptcharender_parameters">这里</a></p>
<figure data-type="image" tabindex="5"><img src="https://luckyhookin.github.io/post-images/reCAPTCHA/2.gif" alt="2.gif"></figure>
<p>将接收到的 <code>token</code> 传到后端即可。</p>
<pre><code class="language-js">this.axios
          .get('http://localhost:3000/login', {

            params: token
          })
          .then(function(response) {
            console.log(response);
          })
          .catch(function(error) {
            console.log(error);
          });
</code></pre>
<h2 id="后端验证">后端验证</h2>
<pre><code class="language-js">let res = await axios
.get(&quot;https://recaptcha.net/recaptcha/api/siteverify&quot;, {
                params: {
                    secret: &quot;6LdFp74UXXXXXXXXXXXXXXXXXXXXXX-XXXXXXXXXXXXXXXXX&quot;,

                    response: ctx.query.token
                }
            });
        ctx.body = res.data;
</code></pre>
<p>参数：</p>
<ul>
<li>
<p><code>secret</code> 为得到的第二个密钥</p>
</li>
<li>
<p><code>response</code> 为接收到的 <code>token</code></p>
</li>
</ul>
<p>返回：</p>
<figure data-type="image" tabindex="6"><img src="https://luckyhookin.github.io/post-images/reCAPTCHA/4.png" alt="4.png"></figure>
<p>得到 <code>success: true</code> 表示通过验证。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[这些快捷键你知道几个？（二）]]></title>
        <id>https://luckyhookin.github.io/post/zhe-xie-kuai-jie-jian-ni-zhi-dao-ji-ge-er</id>
        <link href="https://luckyhookin.github.io/post/zhe-xie-kuai-jie-jian-ni-zhi-dao-ji-ge-er">
        </link>
        <updated>2019-10-28T08:56:48.000Z</updated>
        <summary type="html"><![CDATA[<p>这篇我们讲讲<strong>虚拟桌面</strong>相关的快捷键，还有其他几个快捷键。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这篇我们讲讲<strong>虚拟桌面</strong>相关的快捷键，还有其他几个快捷键。</p>
<!-- more -->
<h1 id="虚拟桌面">虚拟桌面</h1>
<h2 id="ctrl-win-d">Ctrl + Win + D</h2>
<p>按下后新建一个虚拟桌面。</p>
<figure data-type="image" tabindex="1"><img src="https://luckyhookin.github.io/post-images/win-c-d.gif" alt="win-c-d.gif"></figure>
<h2 id="ctrl-win">Ctrl + Win + ←/→</h2>
<p>这两组快捷键可以对虚拟桌面进行左右切换。</p>
<figure data-type="image" tabindex="2"><img src="https://luckyhookin.github.io/post-images/win-c-zy.gif" alt="win-c-zy.gif"></figure>
<h2 id="ctrl-win-f4">Ctrl + Win + F4</h2>
<p>删除虚拟桌面，其中的应用程序和文档会转到附近的桌面中。</p>
<figure data-type="image" tabindex="3"><img src="https://luckyhookin.github.io/post-images/win-c-f4.gif" alt="win-c-f4.gif"></figure>
<h1 id="其他">其他</h1>
<h2 id="ctrl-shift-esc">Ctrl + Shift + Esc</h2>
<p>这个快捷键可以直接打开任务管理器。</p>
<figure data-type="image" tabindex="4"><img src="https://luckyhookin.github.io/post-images/ctr+sh+esc.gif" alt="ctr+sh+esc.gif"></figure>
<h2 id="shift-delete">Shift + Delete</h2>
<p>这个快捷键可以直接删除文件并且删除的文件不会出现在回收站里，所以删除时要三思~</p>
<figure data-type="image" tabindex="5"><img src="https://luckyhookin.github.io/post-images/sh+del.gif" alt="sh+del.gif"></figure>
<h2 id="f2">F2</h2>
<p>选中文件后按 <code>F2</code> 键可以直接重命名，非常好用。</p>
<figure data-type="image" tabindex="6"><img src="https://luckyhookin.github.io/post-images/f2.gif" alt="f2.gif"></figure>
<blockquote>
<p>这篇文章是我上一年暑假时写的，首发于我所在学院的团学公众号，现将它放到这里。这是下半篇。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[这些快捷键你知道几个？（一）]]></title>
        <id>https://luckyhookin.github.io/post/zhe-xie-kuai-jie-jian-ni-zhi-dao-ji-ge</id>
        <link href="https://luckyhookin.github.io/post/zhe-xie-kuai-jie-jian-ni-zhi-dao-ji-ge">
        </link>
        <updated>2019-10-26T12:13:30.000Z</updated>
        <summary type="html"><![CDATA[<p>作为一名程序猿，使用一些效率技巧可以大大提高我们的开发速度。有时鼠标需要多个步骤才能做出来的效果，通过一、两组快捷键就能达到。下面小编就来介绍一些win系统下常用的快捷键，看看你知道几个？</p>
]]></summary>
        <content type="html"><![CDATA[<p>作为一名程序猿，使用一些效率技巧可以大大提高我们的开发速度。有时鼠标需要多个步骤才能做出来的效果，通过一、两组快捷键就能达到。下面小编就来介绍一些win系统下常用的快捷键，看看你知道几个？</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li><a href="#%E4%BD%9C%E7%94%A8%E4%BA%8E%E7%AA%97%E5%8F%A3">作用于窗口</a>
<ul>
<li><a href="#alt-f4">Alt + F4</a></li>
<li><a href="#win">Win + ↑/↓</a></li>
<li><a href="#win-2">Win + ←/→</a></li>
<li><a href="#win-m">Win + M</a></li>
<li><a href="#win-1~0">Win + 1~0</a></li>
</ul>
</li>
<li><a href="#%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91">文本编辑</a>
<ul>
<li><a href="#ctrl-s">Ctrl + S</a></li>
<li><a href="#ctrl-n">Ctrl + N</a></li>
<li><a href="#ctrl-o">Ctrl + O</a></li>
<li><a href="#ctrl-zy">Ctrl + Z/Y</a></li>
<li><a href="#ctrlfh">Ctrl+F/H</a></li>
<li><a href="#homeend">Home/End</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="作用于窗口">作用于窗口</h1>
<h2 id="alt-f4">Alt + F4</h2>
<p><code>Alt+F4</code> 可以说是非常好用的关闭窗口的快捷键了，但是使用之前记得要保存数据。</p>
<figure data-type="image" tabindex="1"><img src="https://luckyhookin.github.io/post-images/alt-f4.gif" alt="alt-f4gif"></figure>
<p>除了关闭窗口，它还可以用来关闭系统。</p>
<figure data-type="image" tabindex="2"><img src="https://luckyhookin.github.io/post-images/alt-f4_shutdown.gif" alt="altf4shutdowngif"></figure>
<h2 id="win">Win + ↑/↓</h2>
<p><code>Win+↑</code> 与 <code>Win+↓</code> 可以实现窗口的最大化、还原与最小化。</p>
<figure data-type="image" tabindex="3"><img src="https://luckyhookin.github.io/post-images/win+xiashan.gif" alt="winxiashangif"></figure>
<h2 id="win-2">Win + ←/→</h2>
<p><code>Win+←</code> 与 <code>Win+→</code> 可以让几个窗口显示在同一屏，这样就不用频繁切换窗口了。</p>
<figure data-type="image" tabindex="4"><img src="https://luckyhookin.github.io/post-images/win+zuoyo.gif" alt="winzuoyogif"></figure>
<p>继续用 <code>Win+↑/↓</code> 可以再分屏。</p>
<h2 id="win-m">Win + M</h2>
<p>使用 <code>Win+M</code> 可以让所有窗口最小化，直接回到桌面。</p>
<figure data-type="image" tabindex="5"><img src="https://luckyhookin.github.io/post-images/win-M.gif" alt="winMgif"></figure>
<h2 id="win-1~0">Win + 1~0</h2>
<p>想要精准的切换到快捷启动栏第几个程序，我们只需使用Win+数字键就可以了。</p>
<figure data-type="image" tabindex="6"><img src="https://luckyhookin.github.io/post-images/win-shuz.gif" alt="winshuzgif"></figure>
<h1 id="文本编辑">文本编辑</h1>
<h2 id="ctrl-s">Ctrl + S</h2>
<p>数据无价，总有一些时候数据还没保存，程序就……所以常按 <code>Ctrl+S</code> 来保存数据是一个好习惯。</p>
<figure data-type="image" tabindex="7"><img src="https://luckyhookin.github.io/post-images/ctrl-s.gif" alt="ctrlsgif"></figure>
<h2 id="ctrl-n">Ctrl + N</h2>
<p>按下 <code>Ctrl+N</code> 可以新建文档。</p>
<figure data-type="image" tabindex="8"><img src="https://luckyhookin.github.io/post-images/ctrl-n.gif" alt="ctrlngif"></figure>
<h2 id="ctrl-o">Ctrl + O</h2>
<p><code>Ctrl+O</code> 为打开文件的快捷键。</p>
<figure data-type="image" tabindex="9"><img src="https://luckyhookin.github.io/post-images/ctrl-o.gif" alt="ctrlogif"></figure>
<h2 id="ctrl-zy">Ctrl + Z/Y</h2>
<p><code>Ctrl+Z</code> 与 <code>Ctrl+Y</code> 分别代表撤销与重做，有时候不小心碰到了什么键不妨 <code>Ctrl+Z</code> 一下。</p>
<figure data-type="image" tabindex="10"><img src="https://luckyhookin.github.io/post-images/ctrl-zy.gif" alt="ctrlzygif"></figure>
<h2 id="ctrlfh">Ctrl+F/H</h2>
<p><code>Ctrl+F</code> 与 <code>Ctrl+H</code> 为查找与替换。</p>
<figure data-type="image" tabindex="11"><img src="https://luckyhookin.github.io/post-images/ctrl-fh.gif" alt="ctrlfhgif"></figure>
<h2 id="homeend">Home/End</h2>
<p><code>Home</code> 键可以让光标跳到行首，<code>End</code> 键可以让光标跳到行尾。</p>
<figure data-type="image" tabindex="12"><img src="https://luckyhookin.github.io/post-images/homeend.gif" alt="homeendgif"></figure>
<blockquote>
<p>这篇文章是我上一年暑假时写的，首发于我所在学院的团学公众号，现将它放到这里。这是上半篇。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vuetify 中为非 vuetify 组件添加过渡效果]]></title>
        <id>https://luckyhookin.github.io/post/vuetify-zhong-wei-fei-vuetify-zu-jian-tian-jia-guo-du-xiao-guo</id>
        <link href="https://luckyhookin.github.io/post/vuetify-zhong-wei-fei-vuetify-zu-jian-tian-jia-guo-du-xiao-guo">
        </link>
        <updated>2019-07-26T13:55:40.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>Most components can have their transition altered through the <code>transition</code> prop.</p>
</blockquote>
<p>vuetify 有提供预设的几个过渡效果 <a href="https://v15.vuetifyjs.com/en/framework/transitions" title="transitions">🔗</a>，而大多数 vuetify 组件都可以使用 <code>transition</code> prop 来使用这些效果，示例代码如下：</p>
<pre><code class="language-html">&lt;v-alert 
    transition=&quot;slide-y-transition&quot;
    :value=&quot;dialog.alert&quot; 
    :type=&quot;dialog.alert&quot;&gt;
        {{ dialog.alertText }}
&lt;/v-alert&gt;
</code></pre>
<p>其中的 <code>transition=&quot;slide-y-transition&quot;</code> 就是了。</p>
<p>但是，如果是其他的组件如 <code>&lt;router-view&gt;</code> 想要使用这些过渡效果，该怎么办？</p>
<p>加上 <code>&lt;transition&gt;</code> 组件即可，示例代码如下：</p>
<pre><code class="language-html">&lt;transition name=&quot;slide-y-transition&quot; mode=&quot;out-in&quot;&gt;
    &lt;router-view&gt;&lt;/router-view&gt;
&lt;/transition&gt;
</code></pre>
<p>注意， 这里要使用 <code>mode=&quot;out-in&quot;</code> 这个<a href="https://cn.vuejs.org/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E6%A8%A1%E5%BC%8F">过渡模式</a>才能完美过渡。<br>
<img src="https://luckyhookin.github.io/post-images/1564157286950.gif" alt=""></p>
]]></content>
    </entry>
</feed>